
LAB2_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca4  08002ca4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca4  08002ca4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000030  08002cdc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002cdc  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008721  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f9  00000000  00000000  0002877a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016372  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009816  00000000  00000000  00041342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822bd  00000000  00000000  0004ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cce15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000cce68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c68 	.word	0x08002c68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002c68 	.word	0x08002c68

0800014c <updateLEDMatrix>:
/* USER CODE BEGIN 0 */

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x18 , 0x3C , 0x66 , 0x66 , 0x7E , 0x7E , 0x66 , 0x66 };
void updateLEDMatrix (int index ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b07      	cmp	r3, #7
 8000158:	f200 8550 	bhi.w	8000bfc <updateLEDMatrix+0xab0>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <updateLEDMatrix+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000185 	.word	0x08000185
 8000168:	080002d1 	.word	0x080002d1
 800016c:	08000429 	.word	0x08000429
 8000170:	08000573 	.word	0x08000573
 8000174:	080006c9 	.word	0x080006c9
 8000178:	08000813 	.word	0x08000813
 800017c:	08000969 	.word	0x08000969
 8000180:	08000ab3 	.word	0x08000ab3
	switch ( index ){
		case 0:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[0] & 0x01));
 8000184:	4ba5      	ldr	r3, [pc, #660]	; (800041c <updateLEDMatrix+0x2d0>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	2b00      	cmp	r3, #0
 800018e:	bf0c      	ite	eq
 8000190:	2301      	moveq	r3, #1
 8000192:	2300      	movne	r3, #0
 8000194:	b2db      	uxtb	r3, r3
 8000196:	461a      	mov	r2, r3
 8000198:	2104      	movs	r1, #4
 800019a:	48a1      	ldr	r0, [pc, #644]	; (8000420 <updateLEDMatrix+0x2d4>)
 800019c:	f001 fd42 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[0] & 0x02));
 80001a0:	4b9e      	ldr	r3, [pc, #632]	; (800041c <updateLEDMatrix+0x2d0>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	f003 0302 	and.w	r3, r3, #2
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	bf0c      	ite	eq
 80001ac:	2301      	moveq	r3, #1
 80001ae:	2300      	movne	r3, #0
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	461a      	mov	r2, r3
 80001b4:	2108      	movs	r1, #8
 80001b6:	489a      	ldr	r0, [pc, #616]	; (8000420 <updateLEDMatrix+0x2d4>)
 80001b8:	f001 fd34 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[0] & 0x04));
 80001bc:	4b97      	ldr	r3, [pc, #604]	; (800041c <updateLEDMatrix+0x2d0>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	f003 0304 	and.w	r3, r3, #4
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	bf0c      	ite	eq
 80001c8:	2301      	moveq	r3, #1
 80001ca:	2300      	movne	r3, #0
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	461a      	mov	r2, r3
 80001d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d4:	4892      	ldr	r0, [pc, #584]	; (8000420 <updateLEDMatrix+0x2d4>)
 80001d6:	f001 fd25 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[0] & 0x08));
 80001da:	4b90      	ldr	r3, [pc, #576]	; (800041c <updateLEDMatrix+0x2d0>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	f003 0308 	and.w	r3, r3, #8
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	bf0c      	ite	eq
 80001e6:	2301      	moveq	r3, #1
 80001e8:	2300      	movne	r3, #0
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	461a      	mov	r2, r3
 80001ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f2:	488b      	ldr	r0, [pc, #556]	; (8000420 <updateLEDMatrix+0x2d4>)
 80001f4:	f001 fd16 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[0] & 0x10));
 80001f8:	4b88      	ldr	r3, [pc, #544]	; (800041c <updateLEDMatrix+0x2d0>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f003 0310 	and.w	r3, r3, #16
 8000200:	2b00      	cmp	r3, #0
 8000202:	bf0c      	ite	eq
 8000204:	2301      	moveq	r3, #1
 8000206:	2300      	movne	r3, #0
 8000208:	b2db      	uxtb	r3, r3
 800020a:	461a      	mov	r2, r3
 800020c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000210:	4883      	ldr	r0, [pc, #524]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000212:	f001 fd07 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[0] & 0x20));
 8000216:	4b81      	ldr	r3, [pc, #516]	; (800041c <updateLEDMatrix+0x2d0>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 0320 	and.w	r3, r3, #32
 800021e:	2b00      	cmp	r3, #0
 8000220:	bf0c      	ite	eq
 8000222:	2301      	moveq	r3, #1
 8000224:	2300      	movne	r3, #0
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022e:	487c      	ldr	r0, [pc, #496]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000230:	f001 fcf8 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[0] & 0x40));
 8000234:	4b79      	ldr	r3, [pc, #484]	; (800041c <updateLEDMatrix+0x2d0>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800023c:	2b00      	cmp	r3, #0
 800023e:	bf0c      	ite	eq
 8000240:	2301      	moveq	r3, #1
 8000242:	2300      	movne	r3, #0
 8000244:	b2db      	uxtb	r3, r3
 8000246:	461a      	mov	r2, r3
 8000248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024c:	4874      	ldr	r0, [pc, #464]	; (8000420 <updateLEDMatrix+0x2d4>)
 800024e:	f001 fce9 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[0] & 0x80));
 8000252:	4b72      	ldr	r3, [pc, #456]	; (800041c <updateLEDMatrix+0x2d0>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	b25b      	sxtb	r3, r3
 8000258:	43db      	mvns	r3, r3
 800025a:	b2db      	uxtb	r3, r3
 800025c:	09db      	lsrs	r3, r3, #7
 800025e:	b2db      	uxtb	r3, r3
 8000260:	461a      	mov	r2, r3
 8000262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000266:	486e      	ldr	r0, [pc, #440]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000268:	f001 fcdc 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	486c      	ldr	r0, [pc, #432]	; (8000424 <updateLEDMatrix+0x2d8>)
 8000274:	f001 fcd6 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	4869      	ldr	r0, [pc, #420]	; (8000424 <updateLEDMatrix+0x2d8>)
 8000280:	f001 fcd0 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	4866      	ldr	r0, [pc, #408]	; (8000424 <updateLEDMatrix+0x2d8>)
 800028c:	f001 fcca 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000296:	4863      	ldr	r0, [pc, #396]	; (8000424 <updateLEDMatrix+0x2d8>)
 8000298:	f001 fcc4 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a2:	4860      	ldr	r0, [pc, #384]	; (8000424 <updateLEDMatrix+0x2d8>)
 80002a4:	f001 fcbe 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	485d      	ldr	r0, [pc, #372]	; (8000424 <updateLEDMatrix+0x2d8>)
 80002b0:	f001 fcb8 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002ba:	485a      	ldr	r0, [pc, #360]	; (8000424 <updateLEDMatrix+0x2d8>)
 80002bc:	f001 fcb2 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c6:	4857      	ldr	r0, [pc, #348]	; (8000424 <updateLEDMatrix+0x2d8>)
 80002c8:	f001 fcac 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 80002cc:	f000 bc97 	b.w	8000bfe <updateLEDMatrix+0xab2>
		case 1:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[1] & 0x01));
 80002d0:	4b52      	ldr	r3, [pc, #328]	; (800041c <updateLEDMatrix+0x2d0>)
 80002d2:	785b      	ldrb	r3, [r3, #1]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	bf0c      	ite	eq
 80002dc:	2301      	moveq	r3, #1
 80002de:	2300      	movne	r3, #0
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	461a      	mov	r2, r3
 80002e4:	2104      	movs	r1, #4
 80002e6:	484e      	ldr	r0, [pc, #312]	; (8000420 <updateLEDMatrix+0x2d4>)
 80002e8:	f001 fc9c 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[1] & 0x02));
 80002ec:	4b4b      	ldr	r3, [pc, #300]	; (800041c <updateLEDMatrix+0x2d0>)
 80002ee:	785b      	ldrb	r3, [r3, #1]
 80002f0:	f003 0302 	and.w	r3, r3, #2
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	bf0c      	ite	eq
 80002f8:	2301      	moveq	r3, #1
 80002fa:	2300      	movne	r3, #0
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	2108      	movs	r1, #8
 8000302:	4847      	ldr	r0, [pc, #284]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000304:	f001 fc8e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[1] & 0x04));
 8000308:	4b44      	ldr	r3, [pc, #272]	; (800041c <updateLEDMatrix+0x2d0>)
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	2b00      	cmp	r3, #0
 8000312:	bf0c      	ite	eq
 8000314:	2301      	moveq	r3, #1
 8000316:	2300      	movne	r3, #0
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000320:	483f      	ldr	r0, [pc, #252]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000322:	f001 fc7f 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[1] & 0x08));
 8000326:	4b3d      	ldr	r3, [pc, #244]	; (800041c <updateLEDMatrix+0x2d0>)
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	f003 0308 	and.w	r3, r3, #8
 800032e:	2b00      	cmp	r3, #0
 8000330:	bf0c      	ite	eq
 8000332:	2301      	moveq	r3, #1
 8000334:	2300      	movne	r3, #0
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033e:	4838      	ldr	r0, [pc, #224]	; (8000420 <updateLEDMatrix+0x2d4>)
 8000340:	f001 fc70 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[1] & 0x10));
 8000344:	4b35      	ldr	r3, [pc, #212]	; (800041c <updateLEDMatrix+0x2d0>)
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf0c      	ite	eq
 8000350:	2301      	moveq	r3, #1
 8000352:	2300      	movne	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035c:	4830      	ldr	r0, [pc, #192]	; (8000420 <updateLEDMatrix+0x2d4>)
 800035e:	f001 fc61 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[1] & 0x20));
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <updateLEDMatrix+0x2d0>)
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	f003 0320 	and.w	r3, r3, #32
 800036a:	2b00      	cmp	r3, #0
 800036c:	bf0c      	ite	eq
 800036e:	2301      	moveq	r3, #1
 8000370:	2300      	movne	r3, #0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037a:	4829      	ldr	r0, [pc, #164]	; (8000420 <updateLEDMatrix+0x2d4>)
 800037c:	f001 fc52 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[1] & 0x40));
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <updateLEDMatrix+0x2d0>)
 8000382:	785b      	ldrb	r3, [r3, #1]
 8000384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000388:	2b00      	cmp	r3, #0
 800038a:	bf0c      	ite	eq
 800038c:	2301      	moveq	r3, #1
 800038e:	2300      	movne	r3, #0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	461a      	mov	r2, r3
 8000394:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000398:	4821      	ldr	r0, [pc, #132]	; (8000420 <updateLEDMatrix+0x2d4>)
 800039a:	f001 fc43 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[1] & 0x80));
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <updateLEDMatrix+0x2d0>)
 80003a0:	785b      	ldrb	r3, [r3, #1]
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	09db      	lsrs	r3, r3, #7
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b2:	481b      	ldr	r0, [pc, #108]	; (8000420 <updateLEDMatrix+0x2d4>)
 80003b4:	f001 fc36 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	4819      	ldr	r0, [pc, #100]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003c0:	f001 fc30 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003cc:	f001 fc2a 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d6:	4813      	ldr	r0, [pc, #76]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003d8:	f001 fc24 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e2:	4810      	ldr	r0, [pc, #64]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003e4:	f001 fc1e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ee:	480d      	ldr	r0, [pc, #52]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003f0:	f001 fc18 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	480a      	ldr	r0, [pc, #40]	; (8000424 <updateLEDMatrix+0x2d8>)
 80003fc:	f001 fc12 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <updateLEDMatrix+0x2d8>)
 8000408:	f001 fc0c 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000412:	4804      	ldr	r0, [pc, #16]	; (8000424 <updateLEDMatrix+0x2d8>)
 8000414:	f001 fc06 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 8000418:	e3f1      	b.n	8000bfe <updateLEDMatrix+0xab2>
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00
		case 2:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[2] & 0x01));
 8000428:	4ba4      	ldr	r3, [pc, #656]	; (80006bc <updateLEDMatrix+0x570>)
 800042a:	789b      	ldrb	r3, [r3, #2]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	bf0c      	ite	eq
 8000434:	2301      	moveq	r3, #1
 8000436:	2300      	movne	r3, #0
 8000438:	b2db      	uxtb	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	2104      	movs	r1, #4
 800043e:	48a0      	ldr	r0, [pc, #640]	; (80006c0 <updateLEDMatrix+0x574>)
 8000440:	f001 fbf0 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[2] & 0x02));
 8000444:	4b9d      	ldr	r3, [pc, #628]	; (80006bc <updateLEDMatrix+0x570>)
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	f003 0302 	and.w	r3, r3, #2
 800044c:	2b00      	cmp	r3, #0
 800044e:	bf0c      	ite	eq
 8000450:	2301      	moveq	r3, #1
 8000452:	2300      	movne	r3, #0
 8000454:	b2db      	uxtb	r3, r3
 8000456:	461a      	mov	r2, r3
 8000458:	2108      	movs	r1, #8
 800045a:	4899      	ldr	r0, [pc, #612]	; (80006c0 <updateLEDMatrix+0x574>)
 800045c:	f001 fbe2 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[2] & 0x04));
 8000460:	4b96      	ldr	r3, [pc, #600]	; (80006bc <updateLEDMatrix+0x570>)
 8000462:	789b      	ldrb	r3, [r3, #2]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	2b00      	cmp	r3, #0
 800046a:	bf0c      	ite	eq
 800046c:	2301      	moveq	r3, #1
 800046e:	2300      	movne	r3, #0
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	4891      	ldr	r0, [pc, #580]	; (80006c0 <updateLEDMatrix+0x574>)
 800047a:	f001 fbd3 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[2] & 0x08));
 800047e:	4b8f      	ldr	r3, [pc, #572]	; (80006bc <updateLEDMatrix+0x570>)
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	f003 0308 	and.w	r3, r3, #8
 8000486:	2b00      	cmp	r3, #0
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000496:	488a      	ldr	r0, [pc, #552]	; (80006c0 <updateLEDMatrix+0x574>)
 8000498:	f001 fbc4 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[2] & 0x10));
 800049c:	4b87      	ldr	r3, [pc, #540]	; (80006bc <updateLEDMatrix+0x570>)
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b4:	4882      	ldr	r0, [pc, #520]	; (80006c0 <updateLEDMatrix+0x574>)
 80004b6:	f001 fbb5 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[2] & 0x20));
 80004ba:	4b80      	ldr	r3, [pc, #512]	; (80006bc <updateLEDMatrix+0x570>)
 80004bc:	789b      	ldrb	r3, [r3, #2]
 80004be:	f003 0320 	and.w	r3, r3, #32
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	bf0c      	ite	eq
 80004c6:	2301      	moveq	r3, #1
 80004c8:	2300      	movne	r3, #0
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	487b      	ldr	r0, [pc, #492]	; (80006c0 <updateLEDMatrix+0x574>)
 80004d4:	f001 fba6 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[2] & 0x40));
 80004d8:	4b78      	ldr	r3, [pc, #480]	; (80006bc <updateLEDMatrix+0x570>)
 80004da:	789b      	ldrb	r3, [r3, #2]
 80004dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f0:	4873      	ldr	r0, [pc, #460]	; (80006c0 <updateLEDMatrix+0x574>)
 80004f2:	f001 fb97 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[2] & 0x80));
 80004f6:	4b71      	ldr	r3, [pc, #452]	; (80006bc <updateLEDMatrix+0x570>)
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	43db      	mvns	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	09db      	lsrs	r3, r3, #7
 8000502:	b2db      	uxtb	r3, r3
 8000504:	461a      	mov	r2, r3
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <updateLEDMatrix+0x574>)
 800050c:	f001 fb8a 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	486b      	ldr	r0, [pc, #428]	; (80006c4 <updateLEDMatrix+0x578>)
 8000518:	f001 fb84 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4868      	ldr	r0, [pc, #416]	; (80006c4 <updateLEDMatrix+0x578>)
 8000524:	f001 fb7e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	4865      	ldr	r0, [pc, #404]	; (80006c4 <updateLEDMatrix+0x578>)
 8000530:	f001 fb78 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	4862      	ldr	r0, [pc, #392]	; (80006c4 <updateLEDMatrix+0x578>)
 800053c:	f001 fb72 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	485f      	ldr	r0, [pc, #380]	; (80006c4 <updateLEDMatrix+0x578>)
 8000548:	f001 fb6c 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	485c      	ldr	r0, [pc, #368]	; (80006c4 <updateLEDMatrix+0x578>)
 8000554:	f001 fb66 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4859      	ldr	r0, [pc, #356]	; (80006c4 <updateLEDMatrix+0x578>)
 8000560:	f001 fb60 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056a:	4856      	ldr	r0, [pc, #344]	; (80006c4 <updateLEDMatrix+0x578>)
 800056c:	f001 fb5a 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 8000570:	e345      	b.n	8000bfe <updateLEDMatrix+0xab2>
		case 3:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[3] & 0x01));
 8000572:	4b52      	ldr	r3, [pc, #328]	; (80006bc <updateLEDMatrix+0x570>)
 8000574:	78db      	ldrb	r3, [r3, #3]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf0c      	ite	eq
 800057e:	2301      	moveq	r3, #1
 8000580:	2300      	movne	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	2104      	movs	r1, #4
 8000588:	484d      	ldr	r0, [pc, #308]	; (80006c0 <updateLEDMatrix+0x574>)
 800058a:	f001 fb4b 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[3] & 0x02));
 800058e:	4b4b      	ldr	r3, [pc, #300]	; (80006bc <updateLEDMatrix+0x570>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	f003 0302 	and.w	r3, r3, #2
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	2108      	movs	r1, #8
 80005a4:	4846      	ldr	r0, [pc, #280]	; (80006c0 <updateLEDMatrix+0x574>)
 80005a6:	f001 fb3d 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[3] & 0x04));
 80005aa:	4b44      	ldr	r3, [pc, #272]	; (80006bc <updateLEDMatrix+0x570>)
 80005ac:	78db      	ldrb	r3, [r3, #3]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	483f      	ldr	r0, [pc, #252]	; (80006c0 <updateLEDMatrix+0x574>)
 80005c4:	f001 fb2e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[3] & 0x08));
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <updateLEDMatrix+0x570>)
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf0c      	ite	eq
 80005d4:	2301      	moveq	r3, #1
 80005d6:	2300      	movne	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	4837      	ldr	r0, [pc, #220]	; (80006c0 <updateLEDMatrix+0x574>)
 80005e2:	f001 fb1f 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[3] & 0x10));
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <updateLEDMatrix+0x570>)
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	4830      	ldr	r0, [pc, #192]	; (80006c0 <updateLEDMatrix+0x574>)
 8000600:	f001 fb10 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[3] & 0x20));
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <updateLEDMatrix+0x570>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <updateLEDMatrix+0x574>)
 800061e:	f001 fb01 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[3] & 0x40));
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <updateLEDMatrix+0x570>)
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf0c      	ite	eq
 800062e:	2301      	moveq	r3, #1
 8000630:	2300      	movne	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063a:	4821      	ldr	r0, [pc, #132]	; (80006c0 <updateLEDMatrix+0x574>)
 800063c:	f001 faf2 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[3] & 0x80));
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <updateLEDMatrix+0x570>)
 8000642:	78db      	ldrb	r3, [r3, #3]
 8000644:	b25b      	sxtb	r3, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <updateLEDMatrix+0x574>)
 8000656:	f001 fae5 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <updateLEDMatrix+0x578>)
 8000662:	f001 fadf 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <updateLEDMatrix+0x578>)
 800066e:	f001 fad9 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <updateLEDMatrix+0x578>)
 800067a:	f001 fad3 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	480f      	ldr	r0, [pc, #60]	; (80006c4 <updateLEDMatrix+0x578>)
 8000686:	f001 facd 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <updateLEDMatrix+0x578>)
 8000692:	f001 fac7 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <updateLEDMatrix+0x578>)
 800069e:	f001 fac1 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <updateLEDMatrix+0x578>)
 80006aa:	f001 fabb 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <updateLEDMatrix+0x578>)
 80006b6:	f001 fab5 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 80006ba:	e2a0      	b.n	8000bfe <updateLEDMatrix+0xab2>
 80006bc:	20000000 	.word	0x20000000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40010c00 	.word	0x40010c00
		case 4:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[4] & 0x01));
 80006c8:	4ba4      	ldr	r3, [pc, #656]	; (800095c <updateLEDMatrix+0x810>)
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf0c      	ite	eq
 80006d4:	2301      	moveq	r3, #1
 80006d6:	2300      	movne	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	2104      	movs	r1, #4
 80006de:	48a0      	ldr	r0, [pc, #640]	; (8000960 <updateLEDMatrix+0x814>)
 80006e0:	f001 faa0 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[4] & 0x02));
 80006e4:	4b9d      	ldr	r3, [pc, #628]	; (800095c <updateLEDMatrix+0x810>)
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2108      	movs	r1, #8
 80006fa:	4899      	ldr	r0, [pc, #612]	; (8000960 <updateLEDMatrix+0x814>)
 80006fc:	f001 fa92 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[4] & 0x04));
 8000700:	4b96      	ldr	r3, [pc, #600]	; (800095c <updateLEDMatrix+0x810>)
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	4891      	ldr	r0, [pc, #580]	; (8000960 <updateLEDMatrix+0x814>)
 800071a:	f001 fa83 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[4] & 0x08));
 800071e:	4b8f      	ldr	r3, [pc, #572]	; (800095c <updateLEDMatrix+0x810>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	488a      	ldr	r0, [pc, #552]	; (8000960 <updateLEDMatrix+0x814>)
 8000738:	f001 fa74 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[4] & 0x10));
 800073c:	4b87      	ldr	r3, [pc, #540]	; (800095c <updateLEDMatrix+0x810>)
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf0c      	ite	eq
 8000748:	2301      	moveq	r3, #1
 800074a:	2300      	movne	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000754:	4882      	ldr	r0, [pc, #520]	; (8000960 <updateLEDMatrix+0x814>)
 8000756:	f001 fa65 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[4] & 0x20));
 800075a:	4b80      	ldr	r3, [pc, #512]	; (800095c <updateLEDMatrix+0x810>)
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf0c      	ite	eq
 8000766:	2301      	moveq	r3, #1
 8000768:	2300      	movne	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	487b      	ldr	r0, [pc, #492]	; (8000960 <updateLEDMatrix+0x814>)
 8000774:	f001 fa56 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[4] & 0x40));
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <updateLEDMatrix+0x810>)
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000790:	4873      	ldr	r0, [pc, #460]	; (8000960 <updateLEDMatrix+0x814>)
 8000792:	f001 fa47 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[4] & 0x80));
 8000796:	4b71      	ldr	r3, [pc, #452]	; (800095c <updateLEDMatrix+0x810>)
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	09db      	lsrs	r3, r3, #7
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	486d      	ldr	r0, [pc, #436]	; (8000960 <updateLEDMatrix+0x814>)
 80007ac:	f001 fa3a 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	486b      	ldr	r0, [pc, #428]	; (8000964 <updateLEDMatrix+0x818>)
 80007b8:	f001 fa34 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4868      	ldr	r0, [pc, #416]	; (8000964 <updateLEDMatrix+0x818>)
 80007c4:	f001 fa2e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	4865      	ldr	r0, [pc, #404]	; (8000964 <updateLEDMatrix+0x818>)
 80007d0:	f001 fa28 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	4862      	ldr	r0, [pc, #392]	; (8000964 <updateLEDMatrix+0x818>)
 80007dc:	f001 fa22 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	485f      	ldr	r0, [pc, #380]	; (8000964 <updateLEDMatrix+0x818>)
 80007e8:	f001 fa1c 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	485c      	ldr	r0, [pc, #368]	; (8000964 <updateLEDMatrix+0x818>)
 80007f4:	f001 fa16 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fe:	4859      	ldr	r0, [pc, #356]	; (8000964 <updateLEDMatrix+0x818>)
 8000800:	f001 fa10 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	4856      	ldr	r0, [pc, #344]	; (8000964 <updateLEDMatrix+0x818>)
 800080c:	f001 fa0a 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 8000810:	e1f5      	b.n	8000bfe <updateLEDMatrix+0xab2>
		case 5:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[5] & 0x01));
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <updateLEDMatrix+0x810>)
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	2104      	movs	r1, #4
 8000828:	484d      	ldr	r0, [pc, #308]	; (8000960 <updateLEDMatrix+0x814>)
 800082a:	f001 f9fb 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[5] & 0x02));
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <updateLEDMatrix+0x810>)
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	2108      	movs	r1, #8
 8000844:	4846      	ldr	r0, [pc, #280]	; (8000960 <updateLEDMatrix+0x814>)
 8000846:	f001 f9ed 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[5] & 0x04));
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <updateLEDMatrix+0x810>)
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf0c      	ite	eq
 8000856:	2301      	moveq	r3, #1
 8000858:	2300      	movne	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000862:	483f      	ldr	r0, [pc, #252]	; (8000960 <updateLEDMatrix+0x814>)
 8000864:	f001 f9de 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[5] & 0x08));
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <updateLEDMatrix+0x810>)
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf0c      	ite	eq
 8000874:	2301      	moveq	r3, #1
 8000876:	2300      	movne	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	461a      	mov	r2, r3
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	4837      	ldr	r0, [pc, #220]	; (8000960 <updateLEDMatrix+0x814>)
 8000882:	f001 f9cf 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[5] & 0x10));
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <updateLEDMatrix+0x810>)
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4830      	ldr	r0, [pc, #192]	; (8000960 <updateLEDMatrix+0x814>)
 80008a0:	f001 f9c0 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[5] & 0x20));
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <updateLEDMatrix+0x810>)
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	f003 0320 	and.w	r3, r3, #32
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf0c      	ite	eq
 80008b0:	2301      	moveq	r3, #1
 80008b2:	2300      	movne	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4828      	ldr	r0, [pc, #160]	; (8000960 <updateLEDMatrix+0x814>)
 80008be:	f001 f9b1 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[5] & 0x40));
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <updateLEDMatrix+0x810>)
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf0c      	ite	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	2300      	movne	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <updateLEDMatrix+0x814>)
 80008dc:	f001 f9a2 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[5] & 0x80));
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <updateLEDMatrix+0x810>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	09db      	lsrs	r3, r3, #7
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f4:	481a      	ldr	r0, [pc, #104]	; (8000960 <updateLEDMatrix+0x814>)
 80008f6:	f001 f995 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <updateLEDMatrix+0x818>)
 8000902:	f001 f98f 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <updateLEDMatrix+0x818>)
 800090e:	f001 f989 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000918:	4812      	ldr	r0, [pc, #72]	; (8000964 <updateLEDMatrix+0x818>)
 800091a:	f001 f983 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <updateLEDMatrix+0x818>)
 8000926:	f001 f97d 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <updateLEDMatrix+0x818>)
 8000932:	f001 f977 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <updateLEDMatrix+0x818>)
 800093e:	f001 f971 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <updateLEDMatrix+0x818>)
 800094a:	f001 f96b 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <updateLEDMatrix+0x818>)
 8000956:	f001 f965 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 800095a:	e150      	b.n	8000bfe <updateLEDMatrix+0xab2>
 800095c:	20000000 	.word	0x20000000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00
		case 6:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[6] & 0x01));
 8000968:	4ba7      	ldr	r3, [pc, #668]	; (8000c08 <updateLEDMatrix+0xabc>)
 800096a:	799b      	ldrb	r3, [r3, #6]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf0c      	ite	eq
 8000974:	2301      	moveq	r3, #1
 8000976:	2300      	movne	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	2104      	movs	r1, #4
 800097e:	48a3      	ldr	r0, [pc, #652]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000980:	f001 f950 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[6] & 0x02));
 8000984:	4ba0      	ldr	r3, [pc, #640]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000986:	799b      	ldrb	r3, [r3, #6]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b00      	cmp	r3, #0
 800098e:	bf0c      	ite	eq
 8000990:	2301      	moveq	r3, #1
 8000992:	2300      	movne	r3, #0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	2108      	movs	r1, #8
 800099a:	489c      	ldr	r0, [pc, #624]	; (8000c0c <updateLEDMatrix+0xac0>)
 800099c:	f001 f942 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[6] & 0x04));
 80009a0:	4b99      	ldr	r3, [pc, #612]	; (8000c08 <updateLEDMatrix+0xabc>)
 80009a2:	799b      	ldrb	r3, [r3, #6]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bf0c      	ite	eq
 80009ac:	2301      	moveq	r3, #1
 80009ae:	2300      	movne	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	4894      	ldr	r0, [pc, #592]	; (8000c0c <updateLEDMatrix+0xac0>)
 80009ba:	f001 f933 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[6] & 0x08));
 80009be:	4b92      	ldr	r3, [pc, #584]	; (8000c08 <updateLEDMatrix+0xabc>)
 80009c0:	799b      	ldrb	r3, [r3, #6]
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf0c      	ite	eq
 80009ca:	2301      	moveq	r3, #1
 80009cc:	2300      	movne	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d6:	488d      	ldr	r0, [pc, #564]	; (8000c0c <updateLEDMatrix+0xac0>)
 80009d8:	f001 f924 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[6] & 0x10));
 80009dc:	4b8a      	ldr	r3, [pc, #552]	; (8000c08 <updateLEDMatrix+0xabc>)
 80009de:	799b      	ldrb	r3, [r3, #6]
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f4:	4885      	ldr	r0, [pc, #532]	; (8000c0c <updateLEDMatrix+0xac0>)
 80009f6:	f001 f915 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[6] & 0x20));
 80009fa:	4b83      	ldr	r3, [pc, #524]	; (8000c08 <updateLEDMatrix+0xabc>)
 80009fc:	799b      	ldrb	r3, [r3, #6]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	487e      	ldr	r0, [pc, #504]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000a14:	f001 f906 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[6] & 0x40));
 8000a18:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000a1a:	799b      	ldrb	r3, [r3, #6]
 8000a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bf0c      	ite	eq
 8000a24:	2301      	moveq	r3, #1
 8000a26:	2300      	movne	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a30:	4876      	ldr	r0, [pc, #472]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000a32:	f001 f8f7 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[6] & 0x80));
 8000a36:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000a38:	799b      	ldrb	r3, [r3, #6]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	09db      	lsrs	r3, r3, #7
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4870      	ldr	r0, [pc, #448]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000a4c:	f001 f8ea 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	486e      	ldr	r0, [pc, #440]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a58:	f001 f8e4 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a62:	486b      	ldr	r0, [pc, #428]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a64:	f001 f8de 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	4868      	ldr	r0, [pc, #416]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a70:	f001 f8d8 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7a:	4865      	ldr	r0, [pc, #404]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a7c:	f001 f8d2 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4862      	ldr	r0, [pc, #392]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a88:	f001 f8cc 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	485f      	ldr	r0, [pc, #380]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000a94:	f001 f8c6 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9e:	485c      	ldr	r0, [pc, #368]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000aa0:	f001 f8c0 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	4859      	ldr	r0, [pc, #356]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000aac:	f001 f8ba 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 8000ab0:	e0a5      	b.n	8000bfe <updateLEDMatrix+0xab2>
		case 7:
			  HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, !(matrix_buffer[7] & 0x01));
 8000ab2:	4b55      	ldr	r3, [pc, #340]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000ab4:	79db      	ldrb	r3, [r3, #7]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bf0c      	ite	eq
 8000abe:	2301      	moveq	r3, #1
 8000ac0:	2300      	movne	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4850      	ldr	r0, [pc, #320]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000aca:	f001 f8ab 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, !(matrix_buffer[7] & 0x02));
 8000ace:	4b4e      	ldr	r3, [pc, #312]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000ad0:	79db      	ldrb	r3, [r3, #7]
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf0c      	ite	eq
 8000ada:	2301      	moveq	r3, #1
 8000adc:	2300      	movne	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4849      	ldr	r0, [pc, #292]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000ae6:	f001 f89d 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, !(matrix_buffer[7] & 0x04));
 8000aea:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf0c      	ite	eq
 8000af6:	2301      	moveq	r3, #1
 8000af8:	2300      	movne	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	4842      	ldr	r0, [pc, #264]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b04:	f001 f88e 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, !(matrix_buffer[7] & 0x08));
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000b0a:	79db      	ldrb	r3, [r3, #7]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf0c      	ite	eq
 8000b14:	2301      	moveq	r3, #1
 8000b16:	2300      	movne	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b20:	483a      	ldr	r0, [pc, #232]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b22:	f001 f87f 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, !(matrix_buffer[7] & 0x10));
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000b28:	79db      	ldrb	r3, [r3, #7]
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf0c      	ite	eq
 8000b32:	2301      	moveq	r3, #1
 8000b34:	2300      	movne	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b40:	f001 f870 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, !(matrix_buffer[7] & 0x20));
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000b46:	79db      	ldrb	r3, [r3, #7]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	bf0c      	ite	eq
 8000b50:	2301      	moveq	r3, #1
 8000b52:	2300      	movne	r3, #0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	482b      	ldr	r0, [pc, #172]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b5e:	f001 f861 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, !(matrix_buffer[7] & 0x40));
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000b64:	79db      	ldrb	r3, [r3, #7]
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf0c      	ite	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	2300      	movne	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7a:	4824      	ldr	r0, [pc, #144]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b7c:	f001 f852 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, !(matrix_buffer[7] & 0x80));
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <updateLEDMatrix+0xabc>)
 8000b82:	79db      	ldrb	r3, [r3, #7]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	09db      	lsrs	r3, r3, #7
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b94:	481d      	ldr	r0, [pc, #116]	; (8000c0c <updateLEDMatrix+0xac0>)
 8000b96:	f001 f845 	bl	8001c24 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000ba2:	f001 f83f 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bae:	f001 f839 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bba:	f001 f833 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	4812      	ldr	r0, [pc, #72]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bc6:	f001 f82d 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bd2:	f001 f827 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bde:	f001 f821 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bea:	f001 f81b 	bl	8001c24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <updateLEDMatrix+0xac4>)
 8000bf6:	f001 f815 	bl	8001c24 <HAL_GPIO_WritePin>
			break ;
 8000bfa:	e000      	b.n	8000bfe <updateLEDMatrix+0xab2>
		default :
			break ;
 8000bfc:	bf00      	nop
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	40010800 	.word	0x40010800
 8000c10:	40010c00 	.word	0x40010c00

08000c14 <display7SEG>:
// display 7 SEG
void display7SEG(int num)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	  if(num == 0)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d122      	bne.n	8000c68 <display7SEG+0x54>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	48bd      	ldr	r0, [pc, #756]	; (8000f1c <display7SEG+0x308>)
 8000c28:	f000 fffc 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	48ba      	ldr	r0, [pc, #744]	; (8000f1c <display7SEG+0x308>)
 8000c32:	f000 fff7 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	48b8      	ldr	r0, [pc, #736]	; (8000f1c <display7SEG+0x308>)
 8000c3c:	f000 fff2 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2108      	movs	r1, #8
 8000c44:	48b5      	ldr	r0, [pc, #724]	; (8000f1c <display7SEG+0x308>)
 8000c46:	f000 ffed 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	48b3      	ldr	r0, [pc, #716]	; (8000f1c <display7SEG+0x308>)
 8000c50:	f000 ffe8 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2120      	movs	r1, #32
 8000c58:	48b0      	ldr	r0, [pc, #704]	; (8000f1c <display7SEG+0x308>)
 8000c5a:	f000 ffe3 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	48ae      	ldr	r0, [pc, #696]	; (8000f1c <display7SEG+0x308>)
 8000c64:	f000 ffde 	bl	8001c24 <HAL_GPIO_WritePin>

	  }
	  if(num == 1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d122      	bne.n	8000cb4 <display7SEG+0xa0>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2101      	movs	r1, #1
 8000c72:	48aa      	ldr	r0, [pc, #680]	; (8000f1c <display7SEG+0x308>)
 8000c74:	f000 ffd6 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	48a7      	ldr	r0, [pc, #668]	; (8000f1c <display7SEG+0x308>)
 8000c7e:	f000 ffd1 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2104      	movs	r1, #4
 8000c86:	48a5      	ldr	r0, [pc, #660]	; (8000f1c <display7SEG+0x308>)
 8000c88:	f000 ffcc 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	48a2      	ldr	r0, [pc, #648]	; (8000f1c <display7SEG+0x308>)
 8000c92:	f000 ffc7 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2110      	movs	r1, #16
 8000c9a:	48a0      	ldr	r0, [pc, #640]	; (8000f1c <display7SEG+0x308>)
 8000c9c:	f000 ffc2 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	489d      	ldr	r0, [pc, #628]	; (8000f1c <display7SEG+0x308>)
 8000ca6:	f000 ffbd 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	489b      	ldr	r0, [pc, #620]	; (8000f1c <display7SEG+0x308>)
 8000cb0:	f000 ffb8 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d122      	bne.n	8000d00 <display7SEG+0xec>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4897      	ldr	r0, [pc, #604]	; (8000f1c <display7SEG+0x308>)
 8000cc0:	f000 ffb0 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4894      	ldr	r0, [pc, #592]	; (8000f1c <display7SEG+0x308>)
 8000cca:	f000 ffab 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 1);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4892      	ldr	r0, [pc, #584]	; (8000f1c <display7SEG+0x308>)
 8000cd4:	f000 ffa6 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2108      	movs	r1, #8
 8000cdc:	488f      	ldr	r0, [pc, #572]	; (8000f1c <display7SEG+0x308>)
 8000cde:	f000 ffa1 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	488d      	ldr	r0, [pc, #564]	; (8000f1c <display7SEG+0x308>)
 8000ce8:	f000 ff9c 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2120      	movs	r1, #32
 8000cf0:	488a      	ldr	r0, [pc, #552]	; (8000f1c <display7SEG+0x308>)
 8000cf2:	f000 ff97 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2140      	movs	r1, #64	; 0x40
 8000cfa:	4888      	ldr	r0, [pc, #544]	; (8000f1c <display7SEG+0x308>)
 8000cfc:	f000 ff92 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d122      	bne.n	8000d4c <display7SEG+0x138>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4884      	ldr	r0, [pc, #528]	; (8000f1c <display7SEG+0x308>)
 8000d0c:	f000 ff8a 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	4881      	ldr	r0, [pc, #516]	; (8000f1c <display7SEG+0x308>)
 8000d16:	f000 ff85 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	487f      	ldr	r0, [pc, #508]	; (8000f1c <display7SEG+0x308>)
 8000d20:	f000 ff80 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	487c      	ldr	r0, [pc, #496]	; (8000f1c <display7SEG+0x308>)
 8000d2a:	f000 ff7b 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2110      	movs	r1, #16
 8000d32:	487a      	ldr	r0, [pc, #488]	; (8000f1c <display7SEG+0x308>)
 8000d34:	f000 ff76 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4877      	ldr	r0, [pc, #476]	; (8000f1c <display7SEG+0x308>)
 8000d3e:	f000 ff71 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4875      	ldr	r0, [pc, #468]	; (8000f1c <display7SEG+0x308>)
 8000d48:	f000 ff6c 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 4)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d122      	bne.n	8000d98 <display7SEG+0x184>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	4871      	ldr	r0, [pc, #452]	; (8000f1c <display7SEG+0x308>)
 8000d58:	f000 ff64 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2102      	movs	r1, #2
 8000d60:	486e      	ldr	r0, [pc, #440]	; (8000f1c <display7SEG+0x308>)
 8000d62:	f000 ff5f 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2104      	movs	r1, #4
 8000d6a:	486c      	ldr	r0, [pc, #432]	; (8000f1c <display7SEG+0x308>)
 8000d6c:	f000 ff5a 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2108      	movs	r1, #8
 8000d74:	4869      	ldr	r0, [pc, #420]	; (8000f1c <display7SEG+0x308>)
 8000d76:	f000 ff55 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4867      	ldr	r0, [pc, #412]	; (8000f1c <display7SEG+0x308>)
 8000d80:	f000 ff50 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2120      	movs	r1, #32
 8000d88:	4864      	ldr	r0, [pc, #400]	; (8000f1c <display7SEG+0x308>)
 8000d8a:	f000 ff4b 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4862      	ldr	r0, [pc, #392]	; (8000f1c <display7SEG+0x308>)
 8000d94:	f000 ff46 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 5)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d122      	bne.n	8000de4 <display7SEG+0x1d0>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2101      	movs	r1, #1
 8000da2:	485e      	ldr	r0, [pc, #376]	; (8000f1c <display7SEG+0x308>)
 8000da4:	f000 ff3e 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2102      	movs	r1, #2
 8000dac:	485b      	ldr	r0, [pc, #364]	; (8000f1c <display7SEG+0x308>)
 8000dae:	f000 ff39 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4859      	ldr	r0, [pc, #356]	; (8000f1c <display7SEG+0x308>)
 8000db8:	f000 ff34 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4856      	ldr	r0, [pc, #344]	; (8000f1c <display7SEG+0x308>)
 8000dc2:	f000 ff2f 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <display7SEG+0x308>)
 8000dcc:	f000 ff2a 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4851      	ldr	r0, [pc, #324]	; (8000f1c <display7SEG+0x308>)
 8000dd6:	f000 ff25 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	484f      	ldr	r0, [pc, #316]	; (8000f1c <display7SEG+0x308>)
 8000de0:	f000 ff20 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 6)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d122      	bne.n	8000e30 <display7SEG+0x21c>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2101      	movs	r1, #1
 8000dee:	484b      	ldr	r0, [pc, #300]	; (8000f1c <display7SEG+0x308>)
 8000df0:	f000 ff18 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2102      	movs	r1, #2
 8000df8:	4848      	ldr	r0, [pc, #288]	; (8000f1c <display7SEG+0x308>)
 8000dfa:	f000 ff13 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2104      	movs	r1, #4
 8000e02:	4846      	ldr	r0, [pc, #280]	; (8000f1c <display7SEG+0x308>)
 8000e04:	f000 ff0e 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4843      	ldr	r0, [pc, #268]	; (8000f1c <display7SEG+0x308>)
 8000e0e:	f000 ff09 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	4841      	ldr	r0, [pc, #260]	; (8000f1c <display7SEG+0x308>)
 8000e18:	f000 ff04 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	483e      	ldr	r0, [pc, #248]	; (8000f1c <display7SEG+0x308>)
 8000e22:	f000 feff 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	483c      	ldr	r0, [pc, #240]	; (8000f1c <display7SEG+0x308>)
 8000e2c:	f000 fefa 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 7)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d122      	bne.n	8000e7c <display7SEG+0x268>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4838      	ldr	r0, [pc, #224]	; (8000f1c <display7SEG+0x308>)
 8000e3c:	f000 fef2 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4835      	ldr	r0, [pc, #212]	; (8000f1c <display7SEG+0x308>)
 8000e46:	f000 feed 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4833      	ldr	r0, [pc, #204]	; (8000f1c <display7SEG+0x308>)
 8000e50:	f000 fee8 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2108      	movs	r1, #8
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <display7SEG+0x308>)
 8000e5a:	f000 fee3 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2110      	movs	r1, #16
 8000e62:	482e      	ldr	r0, [pc, #184]	; (8000f1c <display7SEG+0x308>)
 8000e64:	f000 fede 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	482b      	ldr	r0, [pc, #172]	; (8000f1c <display7SEG+0x308>)
 8000e6e:	f000 fed9 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <display7SEG+0x308>)
 8000e78:	f000 fed4 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 8)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d122      	bne.n	8000ec8 <display7SEG+0x2b4>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2101      	movs	r1, #1
 8000e86:	4825      	ldr	r0, [pc, #148]	; (8000f1c <display7SEG+0x308>)
 8000e88:	f000 fecc 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4822      	ldr	r0, [pc, #136]	; (8000f1c <display7SEG+0x308>)
 8000e92:	f000 fec7 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2104      	movs	r1, #4
 8000e9a:	4820      	ldr	r0, [pc, #128]	; (8000f1c <display7SEG+0x308>)
 8000e9c:	f000 fec2 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <display7SEG+0x308>)
 8000ea6:	f000 febd 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	481b      	ldr	r0, [pc, #108]	; (8000f1c <display7SEG+0x308>)
 8000eb0:	f000 feb8 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <display7SEG+0x308>)
 8000eba:	f000 feb3 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	4816      	ldr	r0, [pc, #88]	; (8000f1c <display7SEG+0x308>)
 8000ec4:	f000 feae 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
	  if(num == 9)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	d122      	bne.n	8000f14 <display7SEG+0x300>
	  {
		  HAL_GPIO_WritePin(SEGMENT_A_GPIO_Port, SEGMENT_A_Pin, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <display7SEG+0x308>)
 8000ed4:	f000 fea6 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_B_GPIO_Port, SEGMENT_B_Pin, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2102      	movs	r1, #2
 8000edc:	480f      	ldr	r0, [pc, #60]	; (8000f1c <display7SEG+0x308>)
 8000ede:	f000 fea1 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_C_GPIO_Port, SEGMENT_C_Pin, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <display7SEG+0x308>)
 8000ee8:	f000 fe9c 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_D_GPIO_Port, SEGMENT_D_Pin, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2108      	movs	r1, #8
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <display7SEG+0x308>)
 8000ef2:	f000 fe97 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_E_GPIO_Port, SEGMENT_E_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <display7SEG+0x308>)
 8000efc:	f000 fe92 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_F_GPIO_Port, SEGMENT_F_Pin, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2120      	movs	r1, #32
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <display7SEG+0x308>)
 8000f06:	f000 fe8d 	bl	8001c24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEGMENT_G_GPIO_Port, SEGMENT_G_Pin, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2140      	movs	r1, #64	; 0x40
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <display7SEG+0x308>)
 8000f10:	f000 fe88 	bl	8001c24 <HAL_GPIO_WritePin>
	  }
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <update7SEG>:

const int MAX_LED = 4;
int led_buffer [4] = {1, 0, 2, 8};
int hour = 15, minute = 8, second = 50;
void update7SEG ( int index ){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d87a      	bhi.n	8001024 <update7SEG+0x104>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <update7SEG+0x14>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f7d 	.word	0x08000f7d
 8000f3c:	08000fb5 	.word	0x08000fb5
 8000f40:	08000fed 	.word	0x08000fed
	switch ( index ){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
	  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2140      	movs	r1, #64	; 0x40
 8000f48:	4839      	ldr	r0, [pc, #228]	; (8001030 <update7SEG+0x110>)
 8000f4a:	f000 fe6b 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <update7SEG+0x110>)
 8000f54:	f000 fe66 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4834      	ldr	r0, [pc, #208]	; (8001030 <update7SEG+0x110>)
 8000f60:	f000 fe60 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6a:	4831      	ldr	r0, [pc, #196]	; (8001030 <update7SEG+0x110>)
 8000f6c:	f000 fe5a 	bl	8001c24 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <update7SEG+0x114>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe4d 	bl	8000c14 <display7SEG>
		break ;
 8000f7a:	e054      	b.n	8001026 <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
	  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	482b      	ldr	r0, [pc, #172]	; (8001030 <update7SEG+0x110>)
 8000f82:	f000 fe4f 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4829      	ldr	r0, [pc, #164]	; (8001030 <update7SEG+0x110>)
 8000f8c:	f000 fe4a 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	4826      	ldr	r0, [pc, #152]	; (8001030 <update7SEG+0x110>)
 8000f98:	f000 fe44 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <update7SEG+0x110>)
 8000fa4:	f000 fe3e 	bl	8001c24 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <update7SEG+0x114>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe31 	bl	8000c14 <display7SEG>
		break ;
 8000fb2:	e038      	b.n	8001026 <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
	  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <update7SEG+0x110>)
 8000fba:	f000 fe33 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	481b      	ldr	r0, [pc, #108]	; (8001030 <update7SEG+0x110>)
 8000fc4:	f000 fe2e 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <update7SEG+0x110>)
 8000fd0:	f000 fe28 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <update7SEG+0x110>)
 8000fdc:	f000 fe22 	bl	8001c24 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <update7SEG+0x114>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe15 	bl	8000c14 <display7SEG>
		break ;
 8000fea:	e01c      	b.n	8001026 <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
	  	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <update7SEG+0x110>)
 8000ff2:	f000 fe17 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <update7SEG+0x110>)
 8000ffc:	f000 fe12 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <update7SEG+0x110>)
 8001008:	f000 fe0c 	bl	8001c24 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <update7SEG+0x110>)
 8001014:	f000 fe06 	bl	8001c24 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <update7SEG+0x114>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fdf9 	bl	8000c14 <display7SEG>
		break ;
 8001022:	e000      	b.n	8001026 <update7SEG+0x106>
	default :
		break ;
 8001024:	bf00      	nop
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010800 	.word	0x40010800
 8001034:	20000008 	.word	0x20000008

08001038 <updateClockBuffer>:

// update clock
void updateClockBuffer ()
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <updateClockBuffer+0x70>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <updateClockBuffer+0x74>)
 8001042:	fb82 1203 	smull	r1, r2, r2, r3
 8001046:	1092      	asrs	r2, r2, #2
 8001048:	17db      	asrs	r3, r3, #31
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <updateClockBuffer+0x78>)
 800104e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <updateClockBuffer+0x70>)
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <updateClockBuffer+0x74>)
 8001056:	fb83 2301 	smull	r2, r3, r3, r1
 800105a:	109a      	asrs	r2, r3, #2
 800105c:	17cb      	asrs	r3, r1, #31
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	1aca      	subs	r2, r1, r3
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <updateClockBuffer+0x78>)
 800106c:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <updateClockBuffer+0x7c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <updateClockBuffer+0x74>)
 8001074:	fb82 1203 	smull	r1, r2, r2, r3
 8001078:	1092      	asrs	r2, r2, #2
 800107a:	17db      	asrs	r3, r3, #31
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <updateClockBuffer+0x78>)
 8001080:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <updateClockBuffer+0x7c>)
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <updateClockBuffer+0x74>)
 8001088:	fb83 2301 	smull	r2, r3, r3, r1
 800108c:	109a      	asrs	r2, r3, #2
 800108e:	17cb      	asrs	r3, r1, #31
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1aca      	subs	r2, r1, r3
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <updateClockBuffer+0x78>)
 800109e:	60da      	str	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000018 	.word	0x20000018
 80010ac:	66666667 	.word	0x66666667
 80010b0:	20000008 	.word	0x20000008
 80010b4:	2000001c 	.word	0x2000001c

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int index_led = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 fac5 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f8a3 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f000 f929 	bl	8001320 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ce:	f000 f8db 	bl	8001288 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010d2:	4846      	ldr	r0, [pc, #280]	; (80011ec <main+0x134>)
 80010d4:	f001 fa04 	bl	80024e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer1(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f000 f987 	bl	80013ec <setTimer1>
  setTimer2(25);
 80010de:	2019      	movs	r0, #25
 80010e0:	f000 f998 	bl	8001414 <setTimer2>
  setTimer3(25);
 80010e4:	2019      	movs	r0, #25
 80010e6:	f000 f9a9 	bl	800143c <setTimer3>
  updateClockBuffer ();
 80010ea:	f7ff ffa5 	bl	8001038 <updateClockBuffer>
  while (1)
  {
	  if (timer1_flag == 1)
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <main+0x138>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d130      	bne.n	8001158 <main+0xa0>
	  {
		  setTimer1(100);
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f000 f978 	bl	80013ec <setTimer1>
		  //TO DO
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 80010fc:	2110      	movs	r1, #16
 80010fe:	483d      	ldr	r0, [pc, #244]	; (80011f4 <main+0x13c>)
 8001100:	f000 fda8 	bl	8001c54 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001104:	2120      	movs	r1, #32
 8001106:	483b      	ldr	r0, [pc, #236]	; (80011f4 <main+0x13c>)
 8001108:	f000 fda4 	bl	8001c54 <HAL_GPIO_TogglePin>

		  // update time
		  second++;
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <main+0x140>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <main+0x140>)
 8001114:	6013      	str	r3, [r2, #0]
		  if ( second >= 60)
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <main+0x140>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b3b      	cmp	r3, #59	; 0x3b
 800111c:	dd07      	ble.n	800112e <main+0x76>
		  {
			  second = 0;
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <main+0x140>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
		  	  minute++;
 8001124:	4b35      	ldr	r3, [pc, #212]	; (80011fc <main+0x144>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a34      	ldr	r2, [pc, #208]	; (80011fc <main+0x144>)
 800112c:	6013      	str	r3, [r2, #0]
		  }
		  if( minute >= 60)
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <main+0x144>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b3b      	cmp	r3, #59	; 0x3b
 8001134:	dd07      	ble.n	8001146 <main+0x8e>
		  {
			  minute = 0;
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <main+0x144>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
		  	  hour++;
 800113c:	4b30      	ldr	r3, [pc, #192]	; (8001200 <main+0x148>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <main+0x148>)
 8001144:	6013      	str	r3, [r2, #0]
		  }
		  if( hour >=24)
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <main+0x148>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b17      	cmp	r3, #23
 800114c:	dd02      	ble.n	8001154 <main+0x9c>
		  {
			  hour = 0;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <main+0x148>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
		  }
		  updateClockBuffer ();
 8001154:	f7ff ff70 	bl	8001038 <updateClockBuffer>


	  }
	  if (timer2_flag == 1)
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <main+0x14c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d12b      	bne.n	80011b8 <main+0x100>
	  {
		  setTimer2(25);
 8001160:	2019      	movs	r0, #25
 8001162:	f000 f957 	bl	8001414 <setTimer2>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d81b      	bhi.n	80011a4 <main+0xec>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <main+0xbc>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118d 	.word	0x0800118d
 800117c:	08001195 	.word	0x08001195
 8001180:	0800119d 	.word	0x0800119d
		  switch (index_led)
		 		  {
		 		  	case 0:
		 		  		update7SEG(index_led);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fecb 	bl	8000f20 <update7SEG>
		 		  		break;
 800118a:	e00c      	b.n	80011a6 <main+0xee>
		 		  	case 1:
		 		  		update7SEG(index_led);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fec7 	bl	8000f20 <update7SEG>
		 		  		break;
 8001192:	e008      	b.n	80011a6 <main+0xee>
		 		  	case 2:
		 		  		update7SEG(index_led);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fec3 	bl	8000f20 <update7SEG>
		 		  		break;
 800119a:	e004      	b.n	80011a6 <main+0xee>
		 		  	case 3:
		 		  		update7SEG(index_led);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff febf 	bl	8000f20 <update7SEG>
		 		  		break;
 80011a2:	e000      	b.n	80011a6 <main+0xee>
		 		  	default:
		 		  		break;
 80011a4:	bf00      	nop

		 		  }
		  index_led++;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
		  if (index_led >= MAX_LED) index_led = 0;
 80011ac:	2204      	movs	r2, #4
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	db01      	blt.n	80011b8 <main+0x100>
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
	  	  }
	  if (timer3_flag == 1)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <main+0x150>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d196      	bne.n	80010ee <main+0x36>
	  {
		  setTimer3(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 f93b 	bl	800143c <setTimer3>
		  updateLEDMatrix(index_led_matrix);
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <main+0x154>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffbe 	bl	800014c <updateLEDMatrix>
		  index_led_matrix++;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <main+0x154>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <main+0x154>)
 80011d8:	6013      	str	r3, [r2, #0]
		  if (index_led_matrix >= MAX_LED_MATRIX) index_led_matrix = 0;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <main+0x154>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2208      	movs	r2, #8
 80011e0:	4293      	cmp	r3, r2
 80011e2:	db84      	blt.n	80010ee <main+0x36>
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <main+0x154>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	  if (timer1_flag == 1)
 80011ea:	e780      	b.n	80010ee <main+0x36>
 80011ec:	20000068 	.word	0x20000068
 80011f0:	20000054 	.word	0x20000054
 80011f4:	40010800 	.word	0x40010800
 80011f8:	20000020 	.word	0x20000020
 80011fc:	2000001c 	.word	0x2000001c
 8001200:	20000018 	.word	0x20000018
 8001204:	2000005c 	.word	0x2000005c
 8001208:	20000064 	.word	0x20000064
 800120c:	2000004c 	.word	0x2000004c

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	; 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fd1a 	bl	8002c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2310      	movs	r3, #16
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fd1e 	bl	8001c88 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001252:	f000 f8c5 	bl	80013e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f000 ff8a 	bl	8002188 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800127a:	f000 f8b1 	bl	80013e0 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3740      	adds	r7, #64	; 0x40
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_TIM2_Init+0x94>)
 80012a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_TIM2_Init+0x94>)
 80012ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_TIM2_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_TIM2_Init+0x94>)
 80012bc:	2209      	movs	r2, #9
 80012be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_TIM2_Init+0x94>)
 80012ce:	f001 f8b7 	bl	8002440 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 f882 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM2_Init+0x94>)
 80012ea:	f001 fa4d 	bl	8002788 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 f874 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM2_Init+0x94>)
 8001306:	f001 fc19 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f866 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000068 	.word	0x20000068

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_GPIO_Init+0xa0>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <MX_GPIO_Init+0xa0>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_GPIO_Init+0xa0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_GPIO_Init+0xa0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_GPIO_Init+0xa0>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_GPIO_Init+0xa0>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001364:	2200      	movs	r2, #0
 8001366:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800136a:	4816      	ldr	r0, [pc, #88]	; (80013c4 <MX_GPIO_Init+0xa4>)
 800136c:	f000 fc5a 	bl	8001c24 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGMENT_A_Pin|SEGMENT_B_Pin|SEGMENT_C_Pin|ROW2_Pin
 8001370:	2200      	movs	r2, #0
 8001372:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <MX_GPIO_Init+0xa8>)
 8001378:	f000 fc54 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 800137c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001380:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2302      	movs	r3, #2
 800138c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <MX_GPIO_Init+0xa4>)
 8001396:	f000 facb 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGMENT_A_Pin SEGMENT_B_Pin SEGMENT_C_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEGMENT_D_Pin SEGMENT_E_Pin SEGMENT_F_Pin
                           SEGMENT_G_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEGMENT_A_Pin|SEGMENT_B_Pin|SEGMENT_C_Pin|ROW2_Pin
 800139a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800139e:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEGMENT_D_Pin|SEGMENT_E_Pin|SEGMENT_F_Pin
                          |SEGMENT_G_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_GPIO_Init+0xa8>)
 80013b4:	f000 fabc 	bl	8001930 <HAL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00

080013cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	timerRun();
 80013d4:	f000 f846 	bl	8001464 <timerRun>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <setTimer1+0x20>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <setTimer1+0x24>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000050 	.word	0x20000050
 8001410:	20000054 	.word	0x20000054

08001414 <setTimer2>:

void setTimer2(int duration)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <setTimer2+0x20>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <setTimer2+0x24>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000058 	.word	0x20000058
 8001438:	2000005c 	.word	0x2000005c

0800143c <setTimer3>:

void setTimer3(int duration)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <setTimer3+0x20>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <setTimer3+0x24>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000060 	.word	0x20000060
 8001460:	20000064 	.word	0x20000064

08001464 <timerRun>:

void timerRun()
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <timerRun+0x6c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd0b      	ble.n	8001488 <timerRun+0x24>
	{
		timer1_counter--;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <timerRun+0x6c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <timerRun+0x6c>)
 8001478:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <timerRun+0x6c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dc02      	bgt.n	8001488 <timerRun+0x24>
		{
			timer1_flag = 1;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <timerRun+0x70>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <timerRun+0x74>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dd0b      	ble.n	80014a8 <timerRun+0x44>
	{
		timer2_counter--;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <timerRun+0x74>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <timerRun+0x74>)
 8001498:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <timerRun+0x74>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dc02      	bgt.n	80014a8 <timerRun+0x44>
		{
			timer2_flag = 1;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <timerRun+0x78>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0)
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <timerRun+0x7c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd0b      	ble.n	80014c8 <timerRun+0x64>
	{
		timer3_counter--;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <timerRun+0x7c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <timerRun+0x7c>)
 80014b8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <timerRun+0x7c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dc02      	bgt.n	80014c8 <timerRun+0x64>
		{
			timer3_flag = 1;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <timerRun+0x80>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000050 	.word	0x20000050
 80014d4:	20000054 	.word	0x20000054
 80014d8:	20000058 	.word	0x20000058
 80014dc:	2000005c 	.word	0x2000005c
 80014e0:	20000060 	.word	0x20000060
 80014e4:	20000064 	.word	0x20000064

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d113      	bne.n	8001586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_TIM_Base_MspInit+0x44>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_Base_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_TIM_Base_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	201c      	movs	r0, #28
 800157c:	f000 f9a1 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001580:	201c      	movs	r0, #28
 8001582:	f000 f9ba 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 f87f 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM2_IRQHandler+0x10>)
 80015ea:	f000 ffc5 	bl	8002578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000068 	.word	0x20000068

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001604:	f7ff fff8 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <LoopFillZerobss+0x16>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001620:	4c09      	ldr	r4, [pc, #36]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f001 faef 	bl	8002c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7ff fd41 	bl	80010b8 <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001640:	08002cac 	.word	0x08002cac
  ldr r2, =_sbss
 8001644:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001648:	200000b4 	.word	0x200000b4

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f923 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff ff3c 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f93b 	bl	8001916 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f903 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000024 	.word	0x20000024
 80016d4:	2000002c 	.word	0x2000002c
 80016d8:	20000028 	.word	0x20000028

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	2000002c 	.word	0x2000002c
 80016fc:	200000b0 	.word	0x200000b0

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	200000b0 	.word	0x200000b0

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <__NVIC_EnableIRQ+0x34>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff90 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2d 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff42 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff90 	bl	8001804 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5f 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e148      	b.n	8001bd6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8137 	bne.w	8001bd0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4aa3      	ldr	r2, [pc, #652]	; (8001bf4 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d05e      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800196c:	4aa1      	ldr	r2, [pc, #644]	; (8001bf4 <HAL_GPIO_Init+0x2c4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d875      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001972:	4aa1      	ldr	r2, [pc, #644]	; (8001bf8 <HAL_GPIO_Init+0x2c8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d058      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001978:	4a9f      	ldr	r2, [pc, #636]	; (8001bf8 <HAL_GPIO_Init+0x2c8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d86f      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800197e:	4a9f      	ldr	r2, [pc, #636]	; (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d052      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001984:	4a9d      	ldr	r2, [pc, #628]	; (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d869      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800198a:	4a9d      	ldr	r2, [pc, #628]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04c      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001990:	4a9b      	ldr	r2, [pc, #620]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d863      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001996:	4a9b      	ldr	r2, [pc, #620]	; (8001c04 <HAL_GPIO_Init+0x2d4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d046      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800199c:	4a99      	ldr	r2, [pc, #612]	; (8001c04 <HAL_GPIO_Init+0x2d4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d85d      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d82a      	bhi.n	80019fc <HAL_GPIO_Init+0xcc>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d859      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <HAL_GPIO_Init+0x80>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a05 	.word	0x08001a05
 80019b8:	08001a17 	.word	0x08001a17
 80019bc:	08001a59 	.word	0x08001a59
 80019c0:	08001a5f 	.word	0x08001a5f
 80019c4:	08001a5f 	.word	0x08001a5f
 80019c8:	08001a5f 	.word	0x08001a5f
 80019cc:	08001a5f 	.word	0x08001a5f
 80019d0:	08001a5f 	.word	0x08001a5f
 80019d4:	08001a5f 	.word	0x08001a5f
 80019d8:	08001a5f 	.word	0x08001a5f
 80019dc:	08001a5f 	.word	0x08001a5f
 80019e0:	08001a5f 	.word	0x08001a5f
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a5f 	.word	0x08001a5f
 80019ec:	08001a5f 	.word	0x08001a5f
 80019f0:	08001a5f 	.word	0x08001a5f
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a21 	.word	0x08001a21
 80019fc:	4a82      	ldr	r2, [pc, #520]	; (8001c08 <HAL_GPIO_Init+0x2d8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e029      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e024      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01f      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e01a      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e013      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e009      	b.n	8001a60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          break;
 8001a5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d801      	bhi.n	8001a6a <HAL_GPIO_Init+0x13a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_Init+0x13e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d802      	bhi.n	8001a7c <HAL_GPIO_Init+0x14c>
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x152>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3b08      	subs	r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	210f      	movs	r1, #15
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8090 	beq.w	8001bd0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a55      	ldr	r2, [pc, #340]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00d      	beq.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0x1dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a47      	ldr	r2, [pc, #284]	; (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_GPIO_Init+0x1d8>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b10:	2300      	movs	r3, #0
 8001b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b22:	493b      	ldr	r1, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4937      	ldr	r1, [pc, #220]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4933      	ldr	r1, [pc, #204]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	492d      	ldr	r1, [pc, #180]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4929      	ldr	r1, [pc, #164]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4923      	ldr	r1, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	491f      	ldr	r1, [pc, #124]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4919      	ldr	r1, [pc, #100]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4915      	ldr	r1, [pc, #84]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f aeaf 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	372c      	adds	r7, #44	; 0x2c
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	10320000 	.word	0x10320000
 8001bf8:	10310000 	.word	0x10310000
 8001bfc:	10220000 	.word	0x10220000
 8001c00:	10210000 	.word	0x10210000
 8001c04:	10120000 	.word	0x10120000
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40010800 	.word	0x40010800
 8001c18:	40010c00 	.word	0x40010c00
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	4613      	mov	r3, r2
 8001c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43d9      	mvns	r1, r3
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	400b      	ands	r3, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	611a      	str	r2, [r3, #16]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e26c      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00c      	beq.n	8001cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d06c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x12c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e246      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x76>
 8001cf0:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7f      	ldr	r2, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xbc>
 8001d2a:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a71      	ldr	r2, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a67      	ldr	r2, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fccc 	bl	8001700 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fcc8 	bl	8001700 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1fa      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe4>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fcb8 	bl	8001700 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fcb4 	bl	8001700 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1e6      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x10c>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d063      	beq.n	8001e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1ba      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4939      	ldr	r1, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fc6d 	bl	8001700 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fc69 	bl	8001700 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e19b      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc4c 	bl	8001700 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fc48 	bl	8001700 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e17a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fc2c 	bl	8001700 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fc28 	bl	8001700 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e15a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fa9a 	bl	8002404 <RCC_Delay>
 8001ed0:	e01c      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fc12 	bl	8001700 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ede:	e00f      	b.n	8001f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc0e 	bl	8001700 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d908      	bls.n	8001f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e140      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	42420000 	.word	0x42420000
 8001efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b9e      	ldr	r3, [pc, #632]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e9      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a6 	beq.w	8002066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b97      	ldr	r3, [pc, #604]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a93      	ldr	r2, [pc, #588]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fbcf 	bl	8001700 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fbcb 	bl	8001700 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0fd      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x312>
 8001f8c:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e02d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	e01c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x356>
 8001fc4:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb7f 	bl	8001700 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7ff fb7b 	bl	8001700 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0ab      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ee      	beq.n	8002006 <HAL_RCC_OscConfig+0x37e>
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fb69 	bl	8001700 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fb65 	bl	8001700 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e095      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8081 	beq.w	8002172 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d061      	beq.n	8002140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d146      	bne.n	8002112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fb39 	bl	8001700 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fb35 	bl	8001700 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e067      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	492d      	ldr	r1, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a19      	ldr	r1, [r3, #32]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	430b      	orrs	r3, r1
 80020de:	4927      	ldr	r1, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb09 	bl	8001700 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fb05 	bl	8001700 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e037      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46a>
 8002110:	e02f      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff faf2 	bl	8001700 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff faee 	bl	8001700 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e020      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x498>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	42420060 	.word	0x42420060

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff fa42 	bl	8001700 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff fa3e 	bl	8001700 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f9a0 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	08002c80 	.word	0x08002c80
 8002354:	20000024 	.word	0x20000024
 8002358:	20000028 	.word	0x20000028

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x36>
 800238a:	e027      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800238e:	613b      	str	r3, [r7, #16]
      break;
 8002390:	e027      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	fb02 f203 	mul.w	r2, r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023de:	613b      	str	r3, [r7, #16]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	693b      	ldr	r3, [r7, #16]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	08002c90 	.word	0x08002c90
 80023fc:	08002ca0 	.word	0x08002ca0
 8002400:	003d0900 	.word	0x003d0900

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000024 	.word	0x20000024
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff f870 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fa6e 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e035      	b.n	8002564 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_TIM_Base_Start_IT+0x90>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_TIM_Base_Start_IT+0x4e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d004      	beq.n	800252e <HAL_TIM_Base_Start_IT+0x4e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_TIM_Base_Start_IT+0x94>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d010      	beq.n	8002562 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e007      	b.n	8002562 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400

08002578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0202 	mvn.w	r2, #2
 80025a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f9b4 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9a7 	bl	8002916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f9b6 	bl	800293a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0204 	mvn.w	r2, #4
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f98a 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f97d 	bl	8002916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f98c 	bl	800293a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b08      	cmp	r3, #8
 8002634:	d122      	bne.n	800267c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b08      	cmp	r3, #8
 8002642:	d11b      	bne.n	800267c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f960 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f953 	bl	8002916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f962 	bl	800293a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b10      	cmp	r3, #16
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0210 	mvn.w	r2, #16
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2208      	movs	r2, #8
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f936 	bl	8002928 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f929 	bl	8002916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f938 	bl	800293a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0201 	mvn.w	r2, #1
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fe68 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fa6b 	bl	8002bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8fc 	bl	800294c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b20      	cmp	r3, #32
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0220 	mvn.w	r2, #32
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa36 	bl	8002bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_ConfigClockSource+0x1c>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0b4      	b.n	800290e <HAL_TIM_ConfigClockSource+0x186>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027dc:	d03e      	beq.n	800285c <HAL_TIM_ConfigClockSource+0xd4>
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	f200 8087 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ea:	f000 8086 	beq.w	80028fa <HAL_TIM_ConfigClockSource+0x172>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f2:	d87f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b70      	cmp	r3, #112	; 0x70
 80027f6:	d01a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0xa6>
 80027f8:	2b70      	cmp	r3, #112	; 0x70
 80027fa:	d87b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d050      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d877      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b50      	cmp	r3, #80	; 0x50
 8002806:	d03c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0xfa>
 8002808:	2b50      	cmp	r3, #80	; 0x50
 800280a:	d873      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d058      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d86f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b30      	cmp	r3, #48	; 0x30
 8002816:	d064      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002818:	2b30      	cmp	r3, #48	; 0x30
 800281a:	d86b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d060      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d867      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05c      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	2b10      	cmp	r3, #16
 800282a:	d05a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 800282c:	e062      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f000 f95e 	bl	8002afe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	609a      	str	r2, [r3, #8]
      break;
 800285a:	e04f      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f000 f947 	bl	8002afe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287e:	609a      	str	r2, [r3, #8]
      break;
 8002880:	e03c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f8be 	bl	8002a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2150      	movs	r1, #80	; 0x50
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f915 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028a0:	e02c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f8dc 	bl	8002a6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2160      	movs	r1, #96	; 0x60
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f905 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028c0:	e01c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f89e 	bl	8002a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f8f5 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028e0:	e00c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f000 f8ec 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028f2:	e003      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e000      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <TIM_Base_SetConfig+0x28>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0x28>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <TIM_Base_SetConfig+0xac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d108      	bne.n	800299a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_Base_SetConfig+0x52>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d003      	beq.n	80029b2 <TIM_Base_SetConfig+0x52>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <TIM_Base_SetConfig+0xac>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d108      	bne.n	80029c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <TIM_Base_SetConfig+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d103      	bne.n	80029f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	615a      	str	r2, [r3, #20]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40000400 	.word	0x40000400

08002a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0201 	bic.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 030a 	bic.w	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e041      	b.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d004      	beq.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10c      	bne.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400

08002bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <__libc_init_array>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	2600      	movs	r6, #0
 8002c14:	4d0c      	ldr	r5, [pc, #48]	; (8002c48 <__libc_init_array+0x38>)
 8002c16:	4c0d      	ldr	r4, [pc, #52]	; (8002c4c <__libc_init_array+0x3c>)
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	42a6      	cmp	r6, r4
 8002c1e:	d109      	bne.n	8002c34 <__libc_init_array+0x24>
 8002c20:	f000 f822 	bl	8002c68 <_init>
 8002c24:	2600      	movs	r6, #0
 8002c26:	4d0a      	ldr	r5, [pc, #40]	; (8002c50 <__libc_init_array+0x40>)
 8002c28:	4c0a      	ldr	r4, [pc, #40]	; (8002c54 <__libc_init_array+0x44>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	42a6      	cmp	r6, r4
 8002c30:	d105      	bne.n	8002c3e <__libc_init_array+0x2e>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c38:	4798      	blx	r3
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7ee      	b.n	8002c1c <__libc_init_array+0xc>
 8002c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c42:	4798      	blx	r3
 8002c44:	3601      	adds	r6, #1
 8002c46:	e7f2      	b.n	8002c2e <__libc_init_array+0x1e>
 8002c48:	08002ca4 	.word	0x08002ca4
 8002c4c:	08002ca4 	.word	0x08002ca4
 8002c50:	08002ca4 	.word	0x08002ca4
 8002c54:	08002ca8 	.word	0x08002ca8

08002c58 <memset>:
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4402      	add	r2, r0
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d100      	bne.n	8002c62 <memset+0xa>
 8002c60:	4770      	bx	lr
 8002c62:	f803 1b01 	strb.w	r1, [r3], #1
 8002c66:	e7f9      	b.n	8002c5c <memset+0x4>

08002c68 <_init>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr

08002c74 <_fini>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr
